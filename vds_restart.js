const { Client } = require('ssh2');
const express = require('express');

// –î–∞–Ω–Ω—ã–µ VDS
const VDS_CONFIG = {
    host: '92.51.22.201',
    username: 'root',
    password: 'o*-?k*4UNaAU8p',
    port: 22
};

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞ VDS
function restartBot() {
    return new Promise((resolve, reject) => {
        const conn = new Client();
        
        conn.on('ready', () => {
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VDS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
            // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            const commands = [
                'cd /root/tg_bot',
                'git pull origin main',
                'npm install',
                'pm2 restart zenith-bot'
            ];
            
            const executeCommand = (index) => {
                if (index >= commands.length) {
                    conn.end();
                    resolve('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –Ω–∞ VDS!');
                    return;
                }
                
                console.log(`üìù –í—ã–ø–æ–ª–Ω—è–µ–º: ${commands[index]}`);
                conn.exec(commands[index], (err, stream) => {
                    if (err) {
                        conn.end();
                        reject(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${err.message}`);
                        return;
                    }
                    
                    let output = '';
                    stream.on('data', (data) => {
                        output += data.toString();
                    });
                    
                    stream.on('close', (code) => {
                        console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${commands[index]}`);
                        if (output) console.log(`üì§ –í—ã–≤–æ–¥: ${output.trim()}`);
                        executeCommand(index + 1);
                    });
                });
            };
            
            executeCommand(0);
        });
        
        conn.on('error', (err) => {
            reject(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VDS: ${err.message}`);
        });
        
        conn.connect(VDS_CONFIG);
    });
}

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è webhook –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
const app = express();
app.use(express.json());

// Endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
app.post('/restart-bot', async (req, res) => {
    try {
        console.log('üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
        const result = await restartBot();
        res.json({ success: true, message: result });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', error);
        res.status(500).json({ success: false, error: error });
    }
});

// Health check
app.get('/health', (req, res) => {
    res.json({ status: 'OK', service: 'VDS Bot Restart Service' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3002;
app.listen(PORT, () => {
    console.log(`üåê VDS Restart Service –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° Endpoint: http://localhost:${PORT}/restart-bot`);
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –º–æ–¥—É–ª—å
module.exports = { restartBot };
