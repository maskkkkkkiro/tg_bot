const express = require('express');
const { exec } = require('child_process');
const crypto = require('crypto');

const app = express();
const PORT = 3001;
const SECRET = process.env.WEBHOOK_SECRET || 'zenith_bot_webhook_secret_2025';

app.use(express.json());

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message) {
    console.log(`[${new Date().toISOString()}] ${message}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ GitHub
function verifySignature(payload, signature) {
    if (!SECRET || !signature) return true; // –ï—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    
    const hmac = crypto.createHmac('sha256', SECRET);
    const digest = 'sha256=' + hmac.update(payload).digest('hex');
    return crypto.timingSafeEqual(Buffer.from(digest), Buffer.from(signature));
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
function performUpdate() {
    return new Promise((resolve, reject) => {
        const commands = [
            'cd /opt/zenith-bot',
            'git fetch origin',
            'git reset --hard origin/main', 
            'git pull origin main',
            'npm install --production',
            'pm2 restart zenith-bot',
            'sleep 2',
            'pm2 status zenith-bot'
        ].join(' && ');
        
        log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...');
        
        exec(commands, { timeout: 60000 }, (error, stdout, stderr) => {
            if (error) {
                log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${error.message}`);
                reject(error);
                return;
            }
            
            log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
            if (stdout) log(`–í—ã–≤–æ–¥: ${stdout}`);
            if (stderr) log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${stderr}`);
            
            resolve(stdout);
        });
    });
}

// Health check endpoint
app.get('/health', (req, res) => {
    res.json({ 
        status: 'ok', 
        timestamp: new Date().toISOString(),
        uptime: process.uptime()
    });
});

// Webhook endpoint
app.post('/webhook', async (req, res) => {
    try {
        const signature = req.headers['x-hub-signature-256'];
        const payload = JSON.stringify(req.body);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if (!verifySignature(payload, signature)) {
            log('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook');
            return res.status(401).json({ error: 'Unauthorized' });
        }
        
        log('üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç GitHub');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ push –≤ main –≤–µ—Ç–∫—É
        if (req.body.ref === 'refs/heads/main') {
            log(`üìù Push –æ—Ç ${req.body.pusher?.name || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}`);
            log(`ÔøΩ –ö–æ–º–º–∏—Ç–æ–≤: ${req.body.commits?.length || 0}`);
            
            try {
                await performUpdate();
                res.status(200).json({ 
                    success: true, 
                    message: 'Bot updated successfully' 
                });
            } catch (error) {
                res.status(500).json({ 
                    success: false, 
                    error: error.message 
                });
            }
        } else {
            log(`‚ÑπÔ∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º push –≤ –≤–µ—Ç–∫—É: ${req.body.ref}`);
            res.status(200).json({ 
                success: true, 
                message: 'Ignored non-main branch' 
            });
        }
    } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: ${error.message}`);
        res.status(500).json({ 
            success: false, 
            error: 'Internal server error' 
        });
    }
});

// Endpoint –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
app.post('/manual-update', async (req, res) => {
    log('üîÑ –ó–∞–ø—Ä–æ—à–µ–Ω–æ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    
    try {
        await performUpdate();
        res.status(200).json({ 
            success: true, 
            message: 'Manual update completed' 
        });
    } catch (error) {
        res.status(500).json({ 
            success: false, 
            error: error.message 
        });
    }
});

app.listen(PORT, () => {
    log(`üîó Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    log(`üì° Webhook URL: http://your-server:${PORT}/webhook`);
    log(`üîß Manual update: http://your-server:${PORT}/manual-update`);
    log(`‚ù§Ô∏è Health check: http://your-server:${PORT}/health`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
    log(`üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
});

process.on('unhandledRejection', (reason) => {
    log(`üí• –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${reason}`);
});

module.exports = app;
